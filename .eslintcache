[{"/Users/a58/Desktop/my/beautiful/src/index.tsx":"1","/Users/a58/Desktop/my/beautiful/src/reportWebVitals.ts":"2","/Users/a58/Desktop/my/beautiful/src/App.tsx":"3","/Users/a58/Desktop/my/beautiful/src/components/reverse/index.tsx":"4","/Users/a58/Desktop/my/beautiful/src/components/cube/index.tsx":"5"},{"size":500,"mtime":1612167040698,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1612167040698,"results":"8","hashOfConfig":"7"},{"size":1381,"mtime":1612261927735,"results":"9","hashOfConfig":"7"},{"size":965,"mtime":1612233767869,"results":"10","hashOfConfig":"7"},{"size":3701,"mtime":1612265117312,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"19d2edm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/a58/Desktop/my/beautiful/src/index.tsx",[],["24","25"],"/Users/a58/Desktop/my/beautiful/src/reportWebVitals.ts",[],"/Users/a58/Desktop/my/beautiful/src/App.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/reverse/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/cube/index.tsx",["26"],"import React, { useState } from 'react';\nimport Style from './index.module.scss';\n/**\n * 假设这个立方体在你的正前方，它一共有6个面\n * 正面的平面（对着你的面）的 index 为 0，\n * 右侧面的平面 index 为 1，\n * 后面的平面（也即是和正面平面相对的那个面） index 为 2\n * 左侧面的平面（也即是和右侧面相对的那个面） index 为 3\n * 上面的平面 index 为 4\n * 下面的平面（也就是上面相对的那个面） index 为 5\n */\n\n/**\n * 根据立方体的特性可得\n * 0（前面）和 2（后面） 的宽高必须一致\n * 1（右面）和 3（左面） 的宽高必须一致\n * 4（下面）和 5（上面） 的宽高必须一致\n * 实际上，只要确定了正面（后者后面） 和 右侧（或者左侧）的宽高，就能确定整个立方体的尺寸\n * 所以 planeSize 的参数，只需要传入2个宽高数组即可\n */\ninterface CubeProps {\n  planeSize: [[number, number], [number, number]];\n  planeNode: React.ReactElement[];\n  index: number;\n  speed?: number;\n  unit?: 'px' | 'vw' | 'rem' | 'em' | 'vh';\n}\n\nconst Cube: React.FC<CubeProps> = (props) => {\n  const { speed = 1, index = 0, planeNode, planeSize, unit = 'px' } = props;\n  const [size02, size13] = planeSize;\n  // 系数\n  const coefficient = 0.902;\n  // 距离\n  const getDistance = (n: number) => n * coefficient + unit;\n  const List = [\n    {\n      style: {\n        width: size02[0] + unit,\n        height: size02[1] + unit,\n        transform: `translateZ(${getDistance(size13[0] / 2)}) rotateX(0deg) scale(${coefficient})`,\n      },\n    },\n    {\n      style: {\n        width: size13[0] + unit,\n        height: size13[1] + unit,\n        transform: `translate3d(${getDistance(\n          size02[0] - size13[0] / 2,\n        )}, 0, 0) rotateY(90deg) scale(${coefficient})`,\n      },\n    },\n    {\n      style: {\n        width: size02[0] + unit,\n        height: size02[1] + unit,\n        transform: `translateZ(-${getDistance(\n          size13[0] / 2,\n        )}) rotateX(180deg) scale(${coefficient})`,\n      },\n    },\n    {\n      style: {\n        width: size13[0] + unit,\n        height: size13[1] + unit,\n        transform: `translate3d(${getDistance(\n          size02[0] - size13[0] / 2,\n        )}, 0, 0) rotateY(-90deg) scale(${coefficient})`,\n      },\n    },\n    {\n      style: {\n        width: size02[0] + unit,\n        height: size13[0] + unit,\n        transform: `translate3d(0, ${getDistance(\n          size13[0] / 2,\n        )}, 0) rotateX(-90deg) scale(${coefficient})`,\n      },\n    },\n    {\n      style: {\n        width: size02[0] + unit,\n        height: size13[0] + unit,\n        transform: `translate3d(0, -${getDistance(\n          size13[0] / 2,\n        )}, 0) rotateX(90deg) scale(${coefficient})`,\n      },\n    },\n  ];\n  console.log(List);\n  const degMaps: number[] = [\n    [0, 0],\n    [0, -90],\n    [180, 0],\n    [0, 90],\n    [90, 0],\n    [-90, 0],\n  ][index % 6];\n  return (\n    <div className={`${Style['cube-container']}`}>\n      <div\n        className={`${Style['cube-info']}`}\n        style={{\n          transform: `rotateX(${degMaps[0]}deg) rotateY(${degMaps[1]}deg) `,\n          transitionDuration: speed + 's',\n          width: size02[0] + unit,\n          height: size02[1] + unit,\n        }}\n      >\n        {List.map((item, i) => {\n          return (\n            <div\n              className={`${Style['cube-item']} ${Style['cube-item-' + i]}`}\n              style={item.style}\n              key={i}\n            >\n              <div className={`${Style['item-info']}`}>{planeNode[i] ? planeNode[i] : ''}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Cube;\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":17,"nodeType":"33","messageId":"34","endLine":1,"endColumn":25},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]