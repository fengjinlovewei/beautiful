[{"/Users/a58/Desktop/my/beautiful/src/index.tsx":"1","/Users/a58/Desktop/my/beautiful/src/reportWebVitals.ts":"2","/Users/a58/Desktop/my/beautiful/src/App.tsx":"3","/Users/a58/Desktop/my/beautiful/src/components/reverse/index.tsx":"4","/Users/a58/Desktop/my/beautiful/src/components/cube/index.tsx":"5"},{"size":500,"mtime":1612167040698,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1612167040698,"results":"8","hashOfConfig":"7"},{"size":1374,"mtime":1613814298914,"results":"9","hashOfConfig":"7"},{"size":965,"mtime":1612233767869,"results":"10","hashOfConfig":"7"},{"size":6357,"mtime":1613816008257,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"19d2edm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/a58/Desktop/my/beautiful/src/index.tsx",[],["24","25"],"/Users/a58/Desktop/my/beautiful/src/reportWebVitals.ts",[],"/Users/a58/Desktop/my/beautiful/src/App.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/reverse/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/cube/index.tsx",["26"],"import React, { useRef, useEffect } from 'react';\nimport Style from './index.module.scss';\n/**\n * 假设这个立方体在你的正前方，它一共有6个面\n * 正面的平面（对着你的面）的 index 为 0，\n * 右侧面的平面 index 为 1，\n * 后面的平面（也即是和正面平面相对的那个面） index 为 2\n * 左侧面的平面（也即是和右侧面相对的那个面） index 为 3\n * 下面的平面 index 为 4\n * 上面的平面（也就是下面相对的那个面） index 为 5\n */\n\n/**\n * 根据立方体的特性可得\n * 0（前面）和 2（后面） 的宽高必须一致\n * 1（右面）和 3（左面） 的宽高必须一致\n * 4（下面）和 5（上面） 的宽高必须一致\n * 实际上，只要确定了正面（后者后面） 和 右侧（或者左侧）的宽高，就能确定整个立方体的尺寸\n * 再进一步可发现，其实只要确定三条边就能确定一个立方体，那就是 正面的宽(x) 正面的高(y) 右侧面的宽(z)\n * 所以 planeSize 的参数，只需要传入3个值[x, y, z]就能确定\n */\ninterface CubeProps {\n  planeSize: number[];\n  planeNode: React.ReactElement[];\n  index: number;\n  speed?: number;\n  unit?: 'px' | 'rem' | 'vw' | 'vh';\n}\n\ninterface dataStorageProps {\n  lastIndex: number | null;\n  lastMap: number[] | null;\n}\n\ninterface logicProps {\n  [x: string]: number[];\n}\n\n// x 轴 顺时针为正数，逆时针为负数\n// y 轴 顺时针为负数，逆时针为正数\nconst originMaps: number[][] = [\n  [0, 0],\n  [0, -90],\n  [0, -180],\n  [0, 90],\n  [90, 0],\n  [-90, 0],\n];\n// x 轴 顺时针为正数，逆时针为负数\n// y 轴 顺时针为负数，逆时针为正数\nconst logicMaps: logicProps = {\n  '01': [0, -1],\n  '02': [0, 2],\n  '03': [0, 1],\n  '04': [1, 0],\n  '05': [-1, 0],\n\n  '10': [0, 1],\n  '12': [0, -1],\n  '13': [0, 2],\n  '14': [1, 0],\n  '15': [-1, 0],\n\n  '20': [0, 2],\n  '21': [0, -1],\n  '23': [0, 1],\n  '24': [1, 0],\n  '25': [-1, 0],\n\n  '30': [0, -1],\n  '31': [0, 2],\n  '32': [0, 1],\n  '34': [1, 0],\n  '35': [-1, 0],\n\n  '40': [0, 1],\n  '41': [1, 0],\n  '42': [0, -1],\n  '43': [-1, 0],\n  '45': [2, 0],\n\n  '50': [1, 0],\n  '51': [0, -1],\n  '52': [-1, 0],\n  '53': [0, 1],\n  '54': [2, 0],\n};\nconst transformValue = (arr: number[]) => {\n  const [x = 0, y = 0] = arr;\n  return `rotateX(${x}deg) rotateY(${y}deg)`;\n};\nconst Cube: React.FC<CubeProps> = (props) => {\n  const { speed = 1, index = 0, planeNode, planeSize, unit = 'px' } = props;\n  const [sizeX, sizeY, sizeZ] = planeSize;\n  const dataStorage = useRef<dataStorageProps>({ lastIndex: null, lastMap: null });\n  // 缩放系数\n  // 由于使用了 perspective ，使得子元素 translateZ 值 将影响此元素的缩放比例\n  // 当 translateZ 的值为正值，代表此元素离你更近了，所以就变大了\n  // 当 translateZ 的值为负值，代表此元素离你更远了，所以就变小了\n  // getCoefficient 的作用就是把缩放的元素，还原至原始大小\n  const getCoefficient = (): number => {\n    const size = {\n      px() {\n        return sizeZ;\n      }, //0.902\n      rem() {\n        const HTML = document.getElementsByTagName('html')[0];\n        const fontSize = window.getComputedStyle(HTML, null).getPropertyValue('font-size');\n        return parseFloat(fontSize) * sizeZ;\n      },\n      vw() {\n        return (window.innerWidth / 100) * sizeZ;\n      },\n      vh() {\n        return (window.innerHeight / 100) * sizeZ;\n      },\n    }[unit]();\n    return 1200 / (1200 + size / 2);\n  };\n  const List = [\n    {\n      style: {\n        width: sizeX + unit,\n        height: sizeY + unit,\n        transform: `translateZ(${sizeZ / 2}${unit}) rotateX(0deg)`,\n      },\n    },\n    {\n      style: {\n        width: sizeZ + unit,\n        height: sizeY + unit,\n        transform: `translate3d(${sizeX - sizeZ / 2}${unit}, 0, 0) rotateY(90deg) `,\n      },\n    },\n    {\n      style: {\n        width: sizeX + unit,\n        height: sizeY + unit,\n        transform: `translateZ(${-sizeZ / 2}${unit}) rotateX(180deg)`,\n      },\n    },\n    {\n      style: {\n        width: sizeZ + unit,\n        height: sizeY + unit,\n        transform: `translate3d(${-(sizeX - sizeZ / 2)}${unit}, 0, 0) rotateY(-90deg) `,\n      },\n    },\n    {\n      style: {\n        width: sizeX + unit,\n        height: sizeZ + unit,\n        transform: `translate3d(0, ${sizeY - sizeZ / 2}${unit}, 0) rotateX(-90deg)`,\n      },\n    },\n    {\n      style: {\n        width: sizeX + unit,\n        height: sizeZ + unit,\n        transform: `translate3d(0, ${-(sizeY - sizeZ / 2)}${unit}, 0) rotateX(90deg)`,\n      },\n    },\n  ];\n  const getTransform = (): string => {\n    console.log('进入函数');\n    const i = index % 6;\n    const { current } = dataStorage;\n    const { lastIndex, lastMap } = current;\n\n    // 如果是初始化， 直接返回上一个\n    if (lastIndex === null) {\n      // 记录上一个索引为当前\n      current.lastIndex = i;\n      // 记录上一个坐标信息为当前\n      current.lastMap = originMaps[i];\n      return transformValue(current.lastMap);\n    }\n    // 记录上一个索引为当前\n    current.lastIndex = i;\n    console.log(current.lastIndex, lastIndex);\n    //if (i === lastIndex) return transform(lastMap || []);\n    console.log(`${lastIndex}${i}`);\n    const currentLogic: number[] = (logicMaps[`${lastIndex}${i}`] || [2, 2]).map((item, s) => {\n      const value = (lastMap || [0, 0])[s];\n      return value + item * 90;\n    });\n    console.log(currentLogic);\n    return transformValue(currentLogic);\n  };\n  const ddd = getTransform();\n  console.log(ddd);\n  return (\n    <div\n      className={`${Style['cube-container']}`}\n      style={{ transform: `scale(${getCoefficient()})` }}\n    >\n      <div data-dd={ddd}></div>\n      <div\n        className={`${Style['cube-info']}`}\n        style={{\n          transform: ddd,\n          transitionDuration: speed + 's',\n          width: sizeX + unit,\n          height: sizeY + unit,\n        }}\n      >\n        {List.map((item, i) => {\n          return (\n            <div\n              className={`${Style['cube-item']} ${Style['cube-item-' + i]}`}\n              style={item.style}\n              key={i}\n            >\n              <div className={`${Style['item-info']}`}>{planeNode[i] ? planeNode[i] : ''}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Cube;\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":25,"nodeType":"33","messageId":"34","endLine":1,"endColumn":34},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]