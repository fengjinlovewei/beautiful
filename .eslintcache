[{"/Users/a58/Desktop/my/beautiful/src/index.tsx":"1","/Users/a58/Desktop/my/beautiful/src/reportWebVitals.ts":"2","/Users/a58/Desktop/my/beautiful/src/App.tsx":"3","/Users/a58/Desktop/my/beautiful/src/components/cube/index.tsx":"4","/Users/a58/Desktop/my/beautiful/src/components/Cube/index.tsx":"5","/Users/a58/Desktop/my/beautiful/src/components/Fireworks/index.tsx":"6","/Users/a58/Desktop/my/beautiful/src/components/Fireworks/js/index.js":"7","/Users/a58/Desktop/my/beautiful/src/components/Arrows/index.tsx":"8","/Users/a58/Desktop/my/beautiful/src/components/Confetti/index.tsx":"9","/Users/a58/Desktop/my/beautiful/src/components/Confetti/MethodBase.ts":"10","/Users/a58/Desktop/my/beautiful/src/components/other/Demo/index.tsx":"11","/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Snow/index.tsx":"12","/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Snow/MethodBase.ts":"13","/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Role/index.tsx":"14","/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Role/MethodBase.ts":"15","/Users/a58/Desktop/my/beautiful/src/components/other/Reverse/index.tsx":"16","/Users/a58/Desktop/my/beautiful/src/components/LuckyWheel/index.tsx":"17","/Users/a58/Desktop/my/beautiful/src/components/LuckyWheel/MethodBase.ts":"18","/Users/a58/Desktop/my/beautiful/src/util/index.ts":"19","/Users/a58/Desktop/my/beautiful/src/util/timer.ts":"20","/Users/a58/Desktop/my/beautiful/src/components/Sudoku/index.tsx":"21","/Users/a58/Desktop/my/beautiful/src/components/Sudoku/MethodBase.ts":"22"},{"size":500,"mtime":1612167040698,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1612167040698,"results":"25","hashOfConfig":"24"},{"size":7361,"mtime":1615367226491,"results":"26","hashOfConfig":"24"},{"size":7704,"mtime":1613984456444,"results":"27","hashOfConfig":"24"},{"size":8229,"mtime":1614321329223,"results":"28","hashOfConfig":"24"},{"size":1718,"mtime":1613987717926,"results":"29","hashOfConfig":"24"},{"size":13980,"mtime":1613986223788,"results":"30","hashOfConfig":"24"},{"size":2162,"mtime":1614912228388,"results":"31","hashOfConfig":"24"},{"size":1649,"mtime":1614146808387,"results":"32","hashOfConfig":"24"},{"size":3660,"mtime":1614152381481,"results":"33","hashOfConfig":"24"},{"size":798,"mtime":1613959768240,"results":"34","hashOfConfig":"24"},{"size":465,"mtime":1614166201052,"results":"35","hashOfConfig":"24"},{"size":1966,"mtime":1614247896342,"results":"36","hashOfConfig":"24"},{"size":592,"mtime":1614324111642,"results":"37","hashOfConfig":"24"},{"size":1686,"mtime":1614324901954,"results":"38","hashOfConfig":"24"},{"size":965,"mtime":1612233767869,"results":"39","hashOfConfig":"24"},{"size":1010,"mtime":1615366917292,"results":"40","hashOfConfig":"24"},{"size":2444,"mtime":1615366903631,"results":"41","hashOfConfig":"24"},{"size":294,"mtime":1615359590517,"results":"42","hashOfConfig":"24"},{"size":1833,"mtime":1615359904260,"results":"43","hashOfConfig":"24"},{"size":1734,"mtime":1615431061329,"results":"44","hashOfConfig":"24"},{"size":2641,"mtime":1615431125317,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"19d2edm",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/a58/Desktop/my/beautiful/src/index.tsx",[],["103","104"],"/Users/a58/Desktop/my/beautiful/src/reportWebVitals.ts",[],"/Users/a58/Desktop/my/beautiful/src/App.tsx",["105","106"],"import React, { useState, useRef, useCallback } from 'react';\n\nimport Reverse from './components/other/Reverse';\n\nimport Cube from './components/Cube';\nimport Fireworks from './components/Fireworks';\nimport Arrows from './components/Arrows';\nimport Confetti, {\n  BasicCannon,\n  RandomDirection,\n  RealisticLook,\n  RandomFireworks,\n  Snow,\n  SchoolPride,\n} from './components/Confetti';\nimport WebGLSnow from './components/OasisEngine/Snow';\nimport WebGLRole from './components/OasisEngine/Role';\nimport LuckyWheel from './components/LuckyWheel';\nimport Sudoku from './components/Sudoku';\nimport Demo from './components/other/Demo';\nimport './App.css';\n\nfunction App() {\n  const [move, setMove] = useState<boolean>(false);\n  const [indexReverse, setIndexReverse] = useState<number>(0);\n  const [indexCube, setIndexCube] = useState<number>(0);\n  const [state, setState] = useState<boolean>(false);\n  const CubeRef = useRef({ nowIndex: 0 });\n  const ConfettiRef = useRef<any>(null);\n  const roleRef = useRef<any>(null);\n  const btnMove = () => {\n    setMove((val) => !val);\n  };\n  //翻牌子\n  const btnReverse = () => {\n    setIndexReverse((val) => (val === 0 ? 2 : 0));\n  };\n  //立方体\n  const direction = 'row';\n  // 固定轨迹\n  const fixed = false;\n  const btnCube = () => {\n    const nowIndex = CubeRef.current.nowIndex + 1;\n    //const key = (Math.random() * 4) >> 0;\n    const key = nowIndex % 4;\n    const n = [0, 3, 2, 1][key];\n    console.log(n);\n    setIndexCube(n);\n    CubeRef.current.nowIndex = nowIndex;\n  };\n  //箭头\n  const btnArrows = () => {\n    setState((val) => !val);\n  };\n  const roleCallBack = useCallback((obj) => {\n    console.log(obj);\n    roleRef.current = obj;\n  }, []);\n  const btnRole = (type: number) => {\n    if (roleRef.current) {\n      const { animator, animations } = roleRef.current;\n      if (type === 1) {\n        console.log(1);\n        animator.playAnimationClip('walk');\n      }\n      if (type === 2) {\n        animator.playAnimationClip(animations[0].name);\n      }\n      if (type === 3) {\n        animator.playAnimationClip(animations[0].name);\n      }\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {/* 翻牌子 */}\n        <div className=\"type-item\">\n          <div>\n            <Reverse\n              front={<div className=\"d1\">正面</div>}\n              back={<div className=\"d2\">背面</div>}\n              move={move}\n            />\n          </div>\n          <div>\n            <button onClick={btnMove}>变换</button>\n          </div>\n        </div>\n        {/* 翻牌子 */}\n        <div className=\"type-item\">\n          <div>\n            <Cube\n              planeNode={[\n                <div className={`cube cube-0`}>0</div>,\n                '',\n                <div className={`cube cube-2`}>2</div>,\n                '',\n                '',\n                '',\n              ]}\n              planeSize={[40, 60, 0]}\n              index={indexReverse}\n              unit=\"vw\"\n              direction=\"row-reverse\"\n              fixed={false}\n              perspective={800}\n            />\n          </div>\n          <div>\n            <button onClick={btnReverse}>变换</button>\n          </div>\n        </div>\n        {/* 立方体 */}\n        <div className=\"type-item\">\n          <div>\n            <Cube\n              planeNode={[\n                <div className={`cube cube-0`}>0</div>,\n                <div className={`cube cube-1`}>1</div>,\n                <div className={`cube cube-2`}>2</div>,\n                <div className={`cube cube-3`}>3</div>,\n                <div className={`cube cube-4`}>4</div>,\n                <div className={`cube cube-5`}>5</div>,\n              ]}\n              planeSize={[200, 200, 200]}\n              index={indexCube}\n              unit=\"px\"\n              direction={direction}\n              fixed={fixed}\n            />\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={btnCube}>变换</button>\n          </div>\n        </div>\n        {/* 烟花 */}\n        <div className=\"type-item\">\n          <div className=\"Fireworks-box\">\n            <Fireworks\n              color=\"111\"\n              width={1800}\n              height={900}\n              count={350}\n              interval={35}\n              length={[1, 8]}\n            />\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={btnCube}>变换</button>\n          </div>\n        </div>\n        {/* 箭头 */}\n        <div className=\"type-item\">\n          <div>\n            <Arrows state={state} deg={100} width={20} direction=\"row\" />\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={btnArrows}>变换</button>\n          </div>\n        </div>\n        {/* 五彩纸屑 */}\n        <div className=\"type-item\">\n          <div>\n            <p>五彩纸屑</p>\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={() => BasicCannon()}>一小发</button>\n            <button onClick={() => RandomDirection()}>一小发（随机方向）</button>\n            <button onClick={() => RealisticLook()}>一大发</button>\n            <button onClick={() => RandomFireworks()}>多发（随机方向）</button>\n            <button onClick={() => Snow()}>下雪花</button>\n            <button onClick={() => SchoolPride()}>连发</button>\n          </div>\n          <div>\n            <p>五彩纸屑dom版</p>\n          </div>\n          <div>\n            <Confetti width=\"320px\" height=\"380px\" ref={ConfettiRef}></Confetti>\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={() => ConfettiRef.current.BasicCannon()}>一小发</button>\n            <button onClick={() => ConfettiRef.current.RandomDirection()}>\n              一小发（随机方向）\n            </button>\n            <button onClick={() => ConfettiRef.current.RealisticLook()}>一大发</button>\n            <button onClick={() => ConfettiRef.current.RandomFireworks()}>多发（随机方向）</button>\n            <button onClick={() => ConfettiRef.current.Snow()}>下雪花</button>\n            <button onClick={() => ConfettiRef.current.SchoolPride()}>连发</button>\n          </div>\n        </div>\n        {/* webGL 的雪花*/}\n        <div className=\"type-item\">\n          <div>\n            <WebGLSnow />\n            {/* <WebGLRole callback={roleCallBack} /> */}\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={() => btnRole(1)}>变换</button>\n          </div>\n        </div>\n        {/* 大转盘*/}\n        <div className=\"type-item\">\n          <div>\n            <LuckyWheel></LuckyWheel>\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={() => btnRole(1)}>变换</button>\n          </div>\n        </div>\n        {/* 九宫格*/}\n        <div className=\"type-item\">\n          <div>\n            <Sudoku></Sudoku>\n          </div>\n          <div style={{ marginTop: '100px' }}>\n            <button onClick={() => btnRole(1)}>变换</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"type-item\">\n        <Demo text=\"我是1\"></Demo>\n      </div>\n      <div className=\"type-item\">\n        <Demo text=\"我是2\"></Demo>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/a58/Desktop/my/beautiful/src/components/cube/index.tsx",["107","108"],"/Users/a58/Desktop/my/beautiful/src/components/Cube/index.tsx",["109","110","111"],"import React, { useRef, useMemo } from 'react';\nimport Style from './index.module.scss';\n/**\n * 设：这个立方体（长方体）在你的正前方，它一共有6个面\n * 正面的平面（对着你的面）的 index 为 0，\n * 右侧面的平面 index 为 1，\n * 后面的平面（也即是和正面平面相对的那个面） index 为 2\n * 左侧面的平面（也即是和右侧面相对的那个面） index 为 3\n * 下面的平面 index 为 4\n * 上面的平面（也就是下面相对的那个面） index 为 5\n */\n\n/**\n * 根据立方体的特性可得\n * 0（前面）和 2（后面） 的宽高必须一致\n * 1（右面）和 3（左面） 的宽高必须一致\n * 4（下面）和 5（上面） 的宽高必须一致\n * 实际上，只要确定三条边就能确定一个立方体，那就是 正面的宽(x) 正面的高(y) 右侧面的宽(z)\n * 所以 planeSize 的参数，只需要传入3个值[x, y, z]就能确定立方体\n */\n\n/**\n * 如果想要翻牌的效果，可以把参数z设置为0\n */\ninterface CubeProps {\n  planeSize: [number, number, number]; // 传入x, y, z 的值\n  planeNode: Array<React.ReactElement | ''>; // 这个数组的项必须是jsx，每个jsx的索引对应着每个面，映射关系参照上面的注释\n  index: number; // 要显示在正前方的面的索引值， 参照上面的注释\n  speed?: number; // 切换平面时的运动速度\n  perspective?: number; // 设置透视点距离\n  unit?: 'px' | 'rem' | 'vw' | 'vh'; // 传入的x, y, z 的值的长度单位\n  // 1. 在 fixed参数值 为 false 的情况下，\n  // row 与 row-reverse 的效果等价， 都是左右切换，也就是在Y轴上切换\n  // column 与 column-reverse 的效果等价， 都是上下切换，也就是在X轴上切换\n  // 因为在 fixed参数值 为 false 的情况下平面切换时，会自动寻找最短路径\n\n  // 2. 在 fixed参数值 为 true 的情况下\n  // row：不会寻找最短路径， 总是从左向右旋转\n  // row-reverse：不会寻找最短路径， 总是从右向左旋转\n  // column：不会寻找最短路径，总是从上向下旋转\n  // column-reverse：不会寻找最短路径， 总是从下向上旋转\n  direction?: 'row' | 'row-reverse' | 'column' | 'column-reverse' | 'all';\n  fixed?: boolean;\n}\n\ninterface dataStorageProps {\n  lastIndex: number | null;\n  lastDeg: number[];\n}\n\n// x 轴 顺时针为正数，逆时针为负数\n// y 轴 顺时针为负数，逆时针为正数\nconst originMaps: number[][] = [\n  [0, 0],\n  [0, -90],\n  [0, -180],\n  [0, 90],\n  [90, 0],\n  [-90, 0],\n];\n\nconst directionMaps = {\n  row: {\n    list: [0, 3, 2, 1],\n    deg: [0, 1],\n    plane2: '180',\n  },\n  'row-reverse': {\n    list: [0, 1, 2, 3],\n    deg: [0, -1],\n    plane2: '180',\n  },\n  column: {\n    list: [0, 4, 2, 5],\n    deg: [1, 0],\n    plane2: '0',\n  },\n  'column-reverse': {\n    list: [0, 5, 2, 4],\n    deg: [-1, 0],\n    plane2: '0',\n  },\n  all: {\n    list: [0, 1, 2, 3, 4, 5],\n    deg: [0, 0],\n    plane2: '180',\n  },\n};\n\nconst transformValue = (x_y: number[]) => {\n  const [x = 0, y = 0] = x_y;\n  return `rotateX(${x}deg) rotateY(${y}deg)`;\n};\nconst Cube: React.FC<CubeProps> = (props) => {\n  const {\n    speed = 1,\n    planeNode,\n    planeSize,\n    perspective = 1200,\n    unit = 'px',\n    direction = 'row',\n    fixed = false,\n  } = props;\n  const index = props.index % 6 >> 0;\n  const [sizeX, sizeY, sizeZ] = planeSize;\n  const dataStorage = useRef<dataStorageProps>({ lastIndex: null, lastDeg: [] });\n  // 缩放系数\n  // 由于使用了 perspective ，使得子元素 translateZ 值 将影响此元素的缩放比例\n  // 当 translateZ 的值为正值，代表此元素离你更近了，所以就变大了\n  // 当 translateZ 的值为负值，代表此元素离你更远了，所以就变小了\n  // coefficient 的作用就是把缩放的元素，还原至原始大小\n  const scale = useMemo((): number => {\n    const size = {\n      px() {\n        return sizeZ;\n      }, //0.902\n      rem() {\n        const HTML = document.getElementsByTagName('html')[0];\n        const fontSize = window.getComputedStyle(HTML, null).getPropertyValue('font-size');\n        return parseFloat(fontSize) * sizeZ;\n      },\n      vw() {\n        return (window.innerWidth / 100) * sizeZ;\n      },\n      vh() {\n        return (window.innerHeight / 100) * sizeZ;\n      },\n    }[unit]();\n    // 相对于原元素放大比例系数，放大了多少倍 (d / d -z)\n    const coefficient = perspective / (perspective - size / 2);\n    // 还原比例\n    return 1 / coefficient;\n  }, [sizeZ, unit]);\n  const List = useMemo(() => {\n    const { plane2 } = directionMaps[direction];\n    return [\n      {\n        style: {\n          width: sizeX + unit,\n          height: sizeY + unit,\n          transform: `translateZ(${sizeZ / 2}${unit}) rotateX(0deg)`,\n        },\n      },\n      {\n        style: {\n          width: sizeZ + unit,\n          height: sizeY + unit,\n          transform: `translate3d(${sizeX - sizeZ / 2}${unit}, 0, 0) rotateY(90deg) `,\n        },\n      },\n      {\n        style: {\n          width: sizeX + unit,\n          height: sizeY + unit,\n          transform: `translateZ(${-sizeZ / 2}${unit}) rotateX(180deg) rotate(${plane2}deg)`,\n        },\n      },\n      {\n        style: {\n          width: sizeZ + unit,\n          height: sizeY + unit,\n          transform: `translate3d(${-(sizeX - sizeZ / 2)}${unit}, 0, 0) rotateY(-90deg) `,\n        },\n      },\n      {\n        style: {\n          width: sizeX + unit,\n          height: sizeZ + unit,\n          transform: `translate3d(0, ${sizeY - sizeZ / 2}${unit}, 0) rotateX(-90deg)`,\n        },\n      },\n      {\n        style: {\n          width: sizeX + unit,\n          height: sizeZ + unit,\n          transform: `translate3d(0, ${-(sizeY - sizeZ / 2)}${unit}, 0) rotateX(90deg)`,\n        },\n      },\n    ];\n  }, [planeSize, unit, direction]);\n  const transformMove = useMemo((): string => {\n    const { current } = dataStorage;\n    const { lastIndex, lastDeg } = current;\n    const { list, deg } = directionMaps[direction];\n    // 如果索引不在范围内，直接返回上一次的 度数，相当于不变化\n    if (!list.includes(index)) return transformValue(lastDeg);\n    // 如果是初始化， 直接返回上一个\n    if (lastIndex === null) {\n      // 记录上一个 索引,和 坐标值 为当前\n      dataStorage.current = {\n        lastIndex: index,\n        lastDeg: originMaps[index],\n      };\n      return transformValue(dataStorage.current.lastDeg);\n    }\n    const currentDeg = (() => {\n      if (direction === 'all') {\n        return originMaps[index];\n      }\n      return lastDeg.map((item, i) => {\n        let n = list.indexOf(index) - list.indexOf(lastIndex);\n        if (n === -3) {\n          n = 1;\n        }\n        if (n === 3) {\n          n = -1;\n        }\n        // 如果确定了轨迹，那么运动轨迹将始终往一个方向旋转，不会寻找最短路径\n        if (fixed && n < 0) {\n          n += 4;\n        }\n        return item + n * deg[i] * 90;\n      });\n    })();\n    /*******/\n    // 这尼玛真是个天坑啊！！！\n    // 不使用setTimeoust，修改 useref 的值，和赋值 useref 会引起渲染2次！\n    /*******/\n    setTimeout(() => {\n      // 记录上一个 索引,和 坐标值 为当前\n      dataStorage.current = {\n        lastIndex: index,\n        lastDeg: currentDeg,\n      };\n    });\n    return transformValue(currentDeg);\n  }, [index, direction]);\n  return (\n    <div\n      className={`${Style['cube-container']}`}\n      style={{ perspective: `${perspective}px`, transform: `scale(${scale}) ` }}\n    >\n      <div\n        className={`${Style['cube-info']}`}\n        style={{\n          transform: transformMove,\n          transitionDuration: speed + 's',\n          width: sizeX + unit,\n          height: sizeY + unit,\n        }}\n      >\n        {List.map((item, i) => {\n          return (\n            <div\n              className={`${Style['cube-item']} ${Style['cube-item-' + i]}`}\n              style={item.style}\n              key={i}\n            >\n              <div className={`${Style['item-info']}`}>{planeNode[i]}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Cube;\n","/Users/a58/Desktop/my/beautiful/src/components/Fireworks/index.tsx",["112"],"import React, { useEffect, useRef } from 'react';\nimport Style from './index.module.scss';\n\nimport { Fireworks as FireworksClass } from './js/index.js';\n/**\n * 注意：本组件依赖于包裹此组件的元素，也就是父元素，对于父元素有以下要求：\n * 1. 父元素必须要有定位\n * 2. 父元素的高度必须为宽度的一半，因为canvas的css样式高度为父元素的100%，宽度canvas会自动处理\n * 这个宽高是影响布局的宽高\n *\n * 对于 width 和 height 参数，这两个参数的单位为px，不需要设置，\n * 同样 height 参数的值也要为 width参数的值 的一半，具体写多少按照你的需求来定，\n * width 和 height 的值越大，烟花越小越清晰\n * 反之， 值越小，烟花越大越模糊\n * 这两个值不影响布局，但是影响具体视觉效果\n *\n */\n\ninterface FireworksProps {\n  width?: number; //canvas 画布的宽度\n  height?: number; // canvas 画布的高度\n  color?: null | string; //颜色值\n  count?: number; //每个烟花的粒子数量\n  interval?: number;\n  length?: number[];\n}\n\nconst Fireworks: React.FC<FireworksProps> = (props) => {\n  const content = useRef(null);\n  const { width = 1920, height = 1080, ...other } = props;\n  useEffect(() => {\n    let flower: any = null;\n    if (content.current) {\n      flower = new FireworksClass(content.current, { ...other });\n    }\n    return () => {\n      try {\n        flower.clear();\n        flower = null;\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }, []);\n  return (\n    <canvas\n      ref={content}\n      className={Style[`canvas-fireworks`]}\n      width={width}\n      height={height}\n    ></canvas>\n  );\n};\n\nexport default Fireworks;\n","/Users/a58/Desktop/my/beautiful/src/components/Fireworks/js/index.js",["113"],"// 从这个范围内，得出随机值\nexport const randomBetween = (from, to) => {\n  return Math.random() * (to - from) + from;\n};\nexport class Fireworks {\n  constructor(node, option = {}) {\n    const { color, interval = 80, count = 200, length = [5, 5] } = option;\n    this.canvas = node;\n    this.start = true;\n    this.timer = null;\n    this.ctx = this.canvas.getContext('2d');\n    // `hsla(${color}, 100%, ${this.brightness(65-75)}%, ${this.opacity})`\n    // color 值是hsla模式中第一个值\n\n    this.color = this.getColor(color);\n    // 粒子爆炸尾巴长度\n    this.length = () => randomBetween(...length) >> 0;\n    this.controller = {\n      particle: {\n        list: new Set(),\n        count: count,\n        length: 3,\n      },\n      firework: {\n        list: new Set(),\n        // 设置随机焰火产生的间隔，以及将产生多少焰火\n        timer: {\n          current: 40,\n          random: 35,\n          total: interval || 40, //数值越大，频率越低\n          batch: 1,\n          reset: () => {\n            this.controller.firework.timer.current = randomBetween(\n              0,\n              this.controller.firework.timer.random,\n            );\n            return this.controller.firework.timer;\n          },\n        },\n      },\n      // 背景星星数\n      star: {\n        list: new Set(),\n        count: 0,\n      },\n\n      // 重力加速度\n      // 值越大，物体向地面的拉力就越大\n      gravity: 0.1,\n\n      // 定义将当前队列保存为前一个队列的时间\n      // 值越大，跟踪时间越长\n      trail: {\n        length: 0,\n        width: 8,\n      },\n\n      // 定义焰火的起始位置\n      launchPosition: {\n        x: undefined,\n        y: undefined,\n        update: () => {\n          this.controller.launchPosition.x = this.canvas.width / 2;\n          this.controller.launchPosition.y = this.canvas.height;\n\n          return this.controller.launchPosition;\n        },\n      },\n\n      // 在画布上定义烟花将击中的区域\n      targetRectangle: {\n        x1: undefined,\n        x2: undefined,\n        y1: undefined,\n        y2: undefined,\n        update: () => {\n          this.controller.targetRectangle.x1 = this.canvas.width * 0.25;\n          this.controller.targetRectangle.x2 = this.canvas.width * 0.75;\n          this.controller.targetRectangle.y1 = this.canvas.height * 0.25;\n          this.controller.targetRectangle.y2 = this.canvas.height * 0.5;\n\n          return this.controller.targetRectangle;\n        },\n      },\n    };\n    this.mouse = {\n      x: 0,\n      y: 0,\n      isPressed: false,\n      limiter: {\n        current: 10,\n        target: 10,\n        reset: () => {\n          this.mouse.limiter.current = 0;\n        },\n      },\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.updateCanvas();\n    this.createNewStars();\n    this.loop();\n  }\n  getColor(color) {\n    if (typeof color === 'string' && color) {\n      let arr = color.split(',');\n      if (arr.length === 2) {\n        return () => randomBetween(arr[0], arr[1]);\n      }\n      if (arr.length === 1) {\n        return () => color;\n      }\n    }\n    return () => randomBetween(0, 360);\n  }\n  clear() {\n    window.cancelAnimationFrame(this.timer);\n  }\n  move() {\n    // 偶尔发射随机烟火，以防止画布是空的\n    this.makeRandomFireworks();\n    //console.log(9999);\n    // 清除之前循环中绘制的所有内容\n    this.clearCanvas();\n\n    // 绘制并更新所有内容\n    this.controller.firework.list.forEach((firework) => {\n      if (firework.reachedTarget) {\n        firework.explode();\n      } else {\n        firework.update().draw();\n      }\n    });\n\n    this.controller.particle.list.forEach((particle) => {\n      if (particle.disappeared) {\n        this.controller.particle.list.delete(particle);\n      } else {\n        particle.update().draw();\n      }\n    });\n\n    this.controller.star.list.forEach((star) => {\n      if (star.disappeared) {\n        this.controller.star.list.delete(star);\n      } else {\n        star.update().draw();\n      }\n    });\n    this.createNewStars();\n\n    // 单击生成烟火，将达到鼠标的位置\n    if (this.mouse.isPressed) this.makeMouseGeneratedFirework();\n  }\n  loop() {\n    this.move();\n    this.timer = window.requestAnimationFrame(this.loop.bind(this, Date.now()));\n  }\n  updateCanvas() {\n    // 使画布填充整个文档\n    // 基于新的画布尺寸更新启动位置和目标位置\n    this.controller.launchPosition.update();\n    this.controller.targetRectangle.update();\n  }\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    // 使粒子相互重叠\n    this.ctx.globalCompositeOperation = 'lighter';\n  }\n  makeRandomFireworks() {\n    // controller.firework.timer.total 设置随机烟火产生的间隔\n    this.controller.firework.timer.current++;\n    if (this.controller.firework.timer.current >= this.controller.firework.timer.total) {\n      for (let i = 0; i < this.controller.firework.timer.batch; i++) {\n        // 在目标区域内随机选择一个点\n        const randomCoords = {\n          x: randomBetween(this.controller.targetRectangle.x1, this.controller.targetRectangle.x2),\n          y: randomBetween(this.controller.targetRectangle.y1, this.controller.targetRectangle.y2),\n        };\n        this.controller.firework.list.add(\n          new Firework(\n            this.controller.launchPosition.x,\n            this.controller.launchPosition.y,\n            randomCoords.x,\n            randomCoords.y,\n            this,\n          ),\n        );\n      }\n      this.controller.firework.timer.reset();\n    }\n  }\n  makeMouseGeneratedFirework() {\n    if (this.mouse.limiter.current >= this.mouse.limiter.target) {\n      this.controller.firework.list.add(\n        new Firework(\n          this.controller.launchPosition.x,\n          this.controller.launchPosition.y,\n          this.mouse.x,\n          this.mouse.y,\n          this,\n        ),\n      );\n      this.mouse.limiter.reset();\n    } else {\n      this.mouse.limiter.current++;\n    }\n  }\n  createNewStars() {\n    while (this.controller.star.list.size < this.controller.star.count) {\n      this.controller.star.list.add(new Star(this));\n    }\n  }\n}\nclass Firework {\n  // 烟花是用给定的起点和目标点在画布上构造的\n  constructor(startX, startY, targetX, targetY, context) {\n    this.context = context;\n    this.coords = {\n      current: {\n        x: startX,\n        y: startY,\n      },\n      previous: new Array(this.context.controller.trail.length).fill({\n        x: startX,\n        y: startY,\n      }),\n      target: {\n        x: targetX,\n        y: targetY,\n      },\n    };\n\n    // 通过知道重力加速度、起始点和目标点，可以计算出弹丸在重力场中的初速度和运动时间\n\n    // a -> 重力加速度(恒定重力)\n    // v0 -> 初始y轴速度\n    // u0 -> 初始x轴速度\n    // t -> time in air 在空中的时间\n    // h -> 沿着y轴移动的高度(startY - targetY) ->在canvas中，我们认为“更高”的点具有较低的y值，因为值从上到下递增)\n    // s -> 沿x轴移动的距离(targetX - startX)\n\n    this.velocity = {\n      // 我们希望当弹丸到达目标时，y轴速度逐渐降低并达到0\n\n      // y轴抛物运动方程:\n      // v0 = at\n      // h = v0t - at^2/2\n\n      // 因此 v0 = sqrt(2ah)\n      y: Math.sqrt(2 * this.context.controller.gravity * (startY - targetY)),\n\n      // 同时，它也应该到达它的x轴目的地:\n      // u0 = s / t\n\n      // 我们已经知道了y轴速度，所以我们可以计算在空中的时间:\n      // t = v0 / a,\n\n      // so:\n      // u0 = s / (v0 / a)\n      // u0 = s * a / v0\n\n      x:\n        ((targetX - startX) * this.context.controller.gravity) /\n        Math.sqrt(2 * this.context.controller.gravity * (startY - targetY)),\n    };\n\n    // 这个属性存储烟花已经旅行和应该旅行的时间\n    this.time = {\n      inAir: 0,\n\n      // t = v0 / a\n      toTravel: this.velocity.y / this.context.controller.gravity,\n    };\n\n    // 此属性存储指示烟花目标的环的值\n    this.ring = {\n      hue: 0,\n      angle: 0,\n      sector: (Math.PI * 4) / 3, // 整个圆的 0.66\n    };\n\n    this.gravity = this.context.controller.gravity;\n  }\n\n  update() {\n    // 更新空中时间\n    this.time.inAir++;\n\n    // 将当前坐标保存为上一个坐标\n    this.coords.previous.push({\n      x: this.coords.current.x,\n      y: this.coords.current.y,\n    });\n    this.coords.previous.splice(0, 1);\n\n    // 更新坐标\n    this.coords.current.x += this.velocity.x;\n    this.coords.current.y -= this.velocity.y;\n\n    // 更新速度\n    this.velocity.y -= this.gravity;\n    // this.velocity.x 不会改变(我们在计算中不包括拖拽)\n\n    // 更新目标圆\n    this.ring.hue += 2;\n    this.ring.angle += 0.04;\n\n    return this;\n  }\n\n  draw() {\n    this.drawTrail();\n    // 对不起，我不喜欢这个环，不要给妇女套环\n    //this.drawRing();\n\n    return this;\n  }\n\n  drawTrail() {\n    this.context.ctx.beginPath();\n    this.context.ctx.moveTo(this.coords.current.x, this.coords.current.y);\n\n    for (let i = this.coords.previous.length - 1; i > 0; i--) {\n      const position = this.coords.previous[i];\n\n      this.context.ctx.lineTo(position.x, position.y);\n      this.context.ctx.lineWidth = this.context.controller.trail.width;\n\n      const opacity = i / this.context.controller.trail.length;\n\n      this.context.ctx.strokeStyle = `hsla(40, 100%, 80%, ${opacity * 100}%)`;\n      this.context.ctx.stroke();\n\n      // 如果这不是数组中的最后一个位置，开始画新行\n      if (i != 1) {\n        this.context.ctx.beginPath();\n        this.context.ctx.moveTo(position.x, position.y);\n      }\n    }\n  }\n\n  drawRing() {\n    this.context.ctx.beginPath();\n    this.context.ctx.arc(\n      this.coords.target.x,\n      this.coords.target.y,\n      8,\n      this.ring.angle,\n      this.ring.angle + (Math.PI * 4) / 3,\n    );\n\n    let opacity = 1;\n    //当烟花靠近目标时，环会慢慢消失\n    if (this.time.toTravel - this.time.inAir < 40) {\n      opacity = (this.time.toTravel - this.time.inAir) / 40; // 返回0到1之间的分数\n    }\n    this.context.ctx.strokeStyle = `hsla(${this.ring.hue}, 100%, 10%, ${opacity})`;\n    this.context.ctx.lineWidth = 2;\n    this.context.ctx.stroke();\n  }\n\n  explode() {\n    // 为同一烟花中的粒子选择一个随机的颜色 // 随机randomBetween(0, 360)\n    const givenHue = this.context.color();\n    // 粒子爆炸尾巴长度\n    const length = this.context.length();\n    // 在爆炸位置创建新的粒子\n    for (let i = 0; i < this.context.controller.particle.count; i++) {\n      this.context.controller.particle.list.add(\n        new Particle(this.coords.target.x, this.coords.target.y, givenHue, this.context, length),\n      );\n    }\n\n    // 创建粒子后，从集合中删除烟花\n    this.context.controller.firework.list.delete(this);\n  }\n\n  get reachedTarget() {\n    return this.time.inAir >= this.time.toTravel;\n  }\n}\nclass Particle {\n  constructor(startX, startY, givenHue, context, length) {\n    this.context = context;\n    this.coords = {\n      current: {\n        x: startX,\n        y: startY,\n      },\n      //this.context.controller.particle.length\n      previous: new Array(length).fill({\n        x: startX,\n        y: startY,\n      }),\n    };\n\n    // 设置随机发射角度和速度\n    this.angle = randomBetween(0, Math.PI * 2);\n    this.velocity = randomBetween(0, 10);\n\n    // 为同一焰火中的所有粒子设置稍微不同的色调\n    this.hue = givenHue + randomBetween(-10, 10);\n\n    this.brightness = randomBetween(65, 75);\n    this.opacity = 1;\n\n    // 设定粒子消失的速度\n    this.fade = randomBetween(0.01, 0.03);\n  }\n\n  update() {\n    // 删除最后一个坐标并push新的坐标\n    this.coords.previous.shift();\n    this.coords.previous.push([this.coords.current.x, this.coords.current.y]);\n    // 使粒子减速\n    this.velocity *= 0.95;\n    // 改变坐标\n    this.coords.current.x += Math.cos(this.angle) * this.velocity;\n    this.coords.current.y +=\n      Math.sin(this.angle) * this.velocity + this.context.controller.gravity * 10;\n    // 改变透明度\n    this.opacity -= this.fade;\n    // 移除不可见的粒子以防止性能问题\n\n    return this;\n  }\n\n  draw() {\n    // 移动到前一个位置，并画线到当前的位置\n    this.context.ctx.beginPath();\n    this.context.ctx.lineWidth = randomBetween(2, 4);\n    this.context.ctx.moveTo(this.coords.previous[0][0], this.coords.previous[0][1]);\n    this.context.ctx.lineTo(this.coords.current.x, this.coords.current.y);\n    this.context.ctx.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.opacity})`;\n    this.context.ctx.stroke();\n\n    return this;\n  }\n\n  get disappeared() {\n    return this.opacity < this.fade;\n  }\n}\nclass Star {\n  constructor(context) {\n    this.context = context;\n    this.coords = {\n      x: Math.floor(randomBetween(0, this.context.canvas.width)),\n      y: Math.floor(randomBetween(0, this.context.canvas.height)),\n    };\n    this.size = Math.ceil(randomBetween(0, 2));\n    this.life = {\n      current: 0,\n      target: Math.floor(randomBetween(150, 300)),\n    };\n    this.opacity = 0;\n  }\n  update() {\n    this.life.current++;\n\n    // 在开始时增加星星的透明度，最后逐渐淡入\n    if (this.life.current < 50) {\n      this.opacity = this.life.current / 50; // 从0增加到1\n    } else if (this.life.current > this.life.target - 50) {\n      this.opacity = (this.life.target - this.life.current) / 50; // 从1减少到0\n    } else this.opacity = 1;\n\n    return this;\n  }\n\n  draw() {\n    // 用圆圈画星星\n    this.context.ctx.beginPath();\n    this.context.ctx.arc(this.coords.x, this.coords.y, this.size, 0, 2 * Math.PI);\n    this.context.ctx.fillStyle = `hsla(60, 100%, 20%, ${this.opacity}`;\n    this.context.ctx.fill();\n\n    return this;\n  }\n\n  get disappeared() {\n    return this.opacity < 0;\n  }\n}\n",["114","115"],"/Users/a58/Desktop/my/beautiful/src/components/Arrows/index.tsx",["116","117"],"import React, { useMemo } from 'react';\nimport Style from './index.module.scss';\n\n/**\n *\n */\ninterface FireworksProps {\n  state: boolean; //控制箭头方向\n  deg?: number; //控制两条线的夹角\n  speed?: number; // 运动速度\n  color?: string; // 箭头颜色\n  unit?: string; //长度单位\n  width?: number; // 箭头单边的长度\n  height?: number; // 箭头的粗度\n  className?: string;\n  direction?: 'row' | 'column'; // 控制主轴方向\n}\n\nconst Fireworks: React.FC<FireworksProps> = (props) => {\n  const {\n    state,\n    speed = 0.25,\n    color = '#b05d20',\n    unit = 'px',\n    width = 7,\n    height = 1,\n    className = '',\n    direction = 'column',\n  } = props;\n  let { deg = 100 } = props;\n  deg = 90 - deg / 2;\n  const boxStyle = useMemo(() => {\n    // 根据主轴控制旋转\n    const rotate = { row: 90, column: 0 }[direction];\n    // 弧度\n    const radian = Math.PI / 180;\n    // 粗度冗余站位\n    const small = (height / 2) * Math.cos((90 - deg) * radian);\n    // 长度冗余站位\n    const big = width / 2 - (width / 2) * Math.cos(deg * radian);\n    // 计算容器系数\n    const size = width - big - small;\n    return {\n      width: size * 2 + unit,\n      height: size * 2 + unit,\n      transform: `rotate(${rotate}deg) `,\n    };\n  }, [width, unit, direction]);\n  const commonStyle = useMemo(() => {\n    return {\n      width: width + unit,\n      height: height + unit,\n      transition: `transform ${speed}s`,\n      background: color,\n      //borderRadius: height + unit,\n    };\n  }, [unit, speed, color]);\n  const allStyle = useMemo(() => {\n    const current = [1, -1];\n    return {\n      left: {\n        ...commonStyle,\n        left: 0,\n        transform: `translateY(-50%) rotate(${deg * current[+state]}deg) `,\n      },\n      right: {\n        ...commonStyle,\n        right: 0,\n        transform: `translateY(-50%) rotate(${deg * current[+!state]}deg) `,\n      },\n    };\n  }, [state, commonStyle, deg]);\n\n  return (\n    <i className={`${Style[`arrowsIcon-box`]} ${className}`} style={boxStyle}>\n      <i style={allStyle.left}></i>\n      <i style={allStyle.right}></i>\n    </i>\n  );\n};\n\nexport default Fireworks;\n","/Users/a58/Desktop/my/beautiful/src/components/Confetti/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/Confetti/MethodBase.ts",["118"],"function randomInRange(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default (context: any) => {\n  return {\n    // 一小发\n    BasicCannon() {\n      context({\n        //particleCount: 100,\n        spread: 70,\n        origin: { y: 0.8 },\n      });\n    },\n    // 一小发（随机方向）\n    RandomDirection() {\n      context({\n        angle: randomInRange(55, 125),\n        spread: randomInRange(50, 70),\n        particleCount: randomInRange(50, 100),\n        origin: { y: 0.6 },\n      });\n    },\n    // 一大发\n    RealisticLook() {\n      const count = 200;\n      const defaults = {\n        origin: { y: 0.8 },\n      };\n\n      function fire(particleRatio: number, opts: any) {\n        context(\n          Object.assign({}, defaults, opts, {\n            particleCount: Math.floor(count * particleRatio),\n          }),\n        );\n      }\n\n      fire(0.25, {\n        spread: 26,\n        startVelocity: 55,\n      });\n      fire(0.2, {\n        spread: 60,\n      });\n      fire(0.35, {\n        spread: 100,\n        decay: 0.91,\n        scalar: 0.8,\n      });\n      fire(0.1, {\n        spread: 120,\n        startVelocity: 25,\n        decay: 0.92,\n        scalar: 1.2,\n      });\n      fire(0.1, {\n        spread: 120,\n        startVelocity: 45,\n      });\n    },\n    // 多发（随机方向）\n    RandomFireworks() {\n      const duration = 15 * 1000;\n      const animationEnd = Date.now() + duration;\n      const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n\n      const interval: any = setInterval(function () {\n        const timeLeft = animationEnd - Date.now();\n\n        if (timeLeft <= 0) {\n          return clearInterval(interval);\n        }\n\n        const particleCount = 50 * (timeLeft / duration);\n        // since particles fall down, start a bit higher than random\n        context(\n          Object.assign({}, defaults, {\n            particleCount,\n            origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },\n          }),\n        );\n        context(\n          Object.assign({}, defaults, {\n            particleCount,\n            origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },\n          }),\n        );\n      }, 250);\n    },\n    // 下雪花\n    Snow() {\n      const duration = 15 * 1000;\n      const animationEnd = Date.now() + duration;\n      let skew = 1;\n      (function frame() {\n        const timeLeft = animationEnd - Date.now();\n        const ticks = Math.max(200, 500 * (timeLeft / duration));\n        skew = Math.max(0.8, skew - 0.001);\n\n        context({\n          particleCount: 1,\n          startVelocity: 0,\n          ticks: ticks,\n          gravity: 0.5,\n          origin: {\n            x: Math.random(),\n            // since particles fall down, skew start toward the top\n            y: Math.random() * skew - 0.2,\n          },\n          colors: ['#ffffff'],\n          shapes: ['circle'],\n          scalar: randomInRange(0.4, 1),\n        });\n\n        if (timeLeft > 0) {\n          requestAnimationFrame(frame);\n        }\n      })();\n    },\n    // 连发\n    SchoolPride(s: number = 4) {\n      const end = Date.now() + s * 1000;\n      // go Buckeyes!\n      const colors = ['#bb0000', '#ffffff'];\n\n      (function frame() {\n        context({\n          particleCount: 2,\n          angle: 60,\n          spread: 55,\n          origin: { x: 0 },\n          colors: colors,\n        });\n        context({\n          particleCount: 2,\n          angle: 120,\n          spread: 55,\n          origin: { x: 1 },\n          colors: colors,\n        });\n\n        if (Date.now() < end) {\n          requestAnimationFrame(frame);\n        }\n      })();\n    },\n  };\n};\n","/Users/a58/Desktop/my/beautiful/src/components/other/Demo/index.tsx",["119"],"import React, { useRef, useEffect, useState } from 'react';\n\ninterface DemoProps {\n  text?: string;\n}\n\ninterface anyProps {\n  [x: string]: string | number | number[];\n}\n\nconst usePrevious = (state: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = state;\n  });\n  return ref.current;\n};\n\nconst Demo: React.FC<DemoProps> = (props) => {\n  const { text } = props;\n  const [now, setNow] = useState(0);\n  const last = usePrevious(now);\n  const add = () => {\n    setNow(now + 1);\n  };\n  const lock = () => {\n    console.log(now);\n  };\n  return (\n    <div>\n      <p>{text}</p>\n      <button onClick={add}>添加值</button>\n      <button onClick={lock}>打印值</button>\n      <p>\n        上一个值：{last}，现在的值{now}\n      </p>\n    </div>\n  );\n};\n\nexport default Demo;\n","/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Snow/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Snow/MethodBase.ts",["120","121","122","123","124"],"import {\n  AssetType,\n  Camera,\n  ParticleRenderer,\n  SystemInfo,\n  Texture2D,\n  TextureFilterMode,\n  TextureWrapMode,\n  Vector3,\n  Vector4,\n  WebGLEngine,\n  WrapMode,\n  Color,\n} from 'oasis-engine';\n\n//-- create engine object\nexport default (canvas: HTMLCanvasElement) => {\n  const engine = new WebGLEngine(canvas);\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\n  const scene = engine.sceneManager.activeScene;\n  const rootEntity = scene.createRootEntity();\n\n  //-- create camera\n  const cameraEntity = rootEntity.createChild('camera_entity');\n  cameraEntity.transform.position = new Vector3(0, 0, 50);\n  const camera = cameraEntity.addComponent(Camera);\n\n  camera.backgroundColor = new Vector4(1, 0.647, 0, 1);\n\n  engine.run();\n\n  const particleEntity = rootEntity.createChild('particle');\n\n  let particles: ParticleRenderer = particleEntity.addComponent(ParticleRenderer);\n\n  engine.resourceManager\n    .load<Texture2D>({\n      url: 'https://gw.alipayobjects.com/mdn/rms_d27172/afts/img/A*kxloQYq2YDEAAAAAAAAAAAAAARQnAQ',\n      type: AssetType.Texture2D,\n    })\n    .then((resource) => {\n      particles.maxCount = 100;\n      particles.startTimeRandomness = 10;\n      particles.lifetime = 10;\n      particles.position = new Vector3(0, 20, 0);\n      particles.positionRandomness = new Vector3(100, 0, 0);\n      particles.velocity = new Vector3(0, -3, 0);\n      particles.velocityRandomness = new Vector3(1, 2, 0);\n      particles.accelerationRandomness = new Vector3(0, 1, 0);\n      particles.velocityRandomness = new Vector3(-1, -1, -1);\n      particles.rotateVelocity = 1;\n      particles.rotateVelocityRandomness = 1;\n      particles.size = 1;\n      particles.sizeRandomness = 0.8;\n      particles.colorRandomness = 1;\n      particles.isFadeIn = true;\n      particles.isFadeOut = true;\n      particles.texture = resource;\n      particles.start();\n    });\n};\n","/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Role/index.tsx",["125"],"import React, { useRef, useEffect } from 'react';\nimport MethodBase from './MethodBase';\nimport Style from './index.module.scss';\n\ninterface SnowProps {\n  callback(obj: any): void;\n}\n\nconst Snow: React.FC<SnowProps> = (props) => {\n  const { callback } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    const canvas = canvasRef.current as HTMLCanvasElement;\n    MethodBase(canvas).then((res) => {\n      console.log(res);\n      callback(res);\n    });\n  }, []);\n  return <canvas className={Style['canvas']} ref={canvasRef}></canvas>;\n};\n\nexport default Snow;\n",["126","127"],"/Users/a58/Desktop/my/beautiful/src/components/OasisEngine/Role/MethodBase.ts",["128","129","130"],"import { OrbitControl } from '@oasis-engine/controls';\nimport {\n  Animation,\n  Camera,\n  DirectLight,\n  EnvironmentMapLight,\n  Logger,\n  SystemInfo,\n  Vector3,\n  WebGLEngine,\n  Vector4,\n} from 'oasis-engine';\n\n//-- create engine object\nexport default async (canvas: HTMLCanvasElement) => {\n  const engine = new WebGLEngine(canvas);\n  engine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n  engine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n  const scene = engine.sceneManager.activeScene;\n  const rootEntity = scene.createRootEntity();\n\n  // camera\n  const cameraEntity = rootEntity.createChild('camera_node');\n  cameraEntity.transform.position = new Vector3(0, 1, 5);\n  const camera = cameraEntity.addComponent(Camera);\n  camera.backgroundColor = new Vector4(1, 0.647, 0, 0);\n  //cameraEntity.addComponent(OrbitControl).target = new Vector3(0, 1, 0);\n\n  const lightNode = rootEntity.createChild('light_node');\n  rootEntity.addComponent(EnvironmentMapLight);\n  lightNode.addComponent(DirectLight).intensity = 0.6;\n  lightNode.transform.lookAt(new Vector3(0, 0, 1));\n  lightNode.transform.rotate(new Vector3(0, 90, 0));\n\n  const promise = engine.resourceManager\n    .load('https://gw.alipayobjects.com/os/basement_prod/aa318303-d7c9-4cb8-8c5a-9cf3855fd1e6.gltf')\n    .then((asset) => {\n      console.log(asset);\n      const { animations, defaultSceneRoot } = asset as any;\n      rootEntity.addChild(defaultSceneRoot);\n\n      const animator = defaultSceneRoot.getComponent(Animation);\n      animator.playAnimationClip(animations[0].name);\n      return {\n        animator,\n        animations,\n      };\n    });\n\n  engine.run();\n\n  return promise;\n};\n","/Users/a58/Desktop/my/beautiful/src/components/other/Reverse/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/LuckyWheel/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/LuckyWheel/MethodBase.ts",[],"/Users/a58/Desktop/my/beautiful/src/util/index.ts",[],"/Users/a58/Desktop/my/beautiful/src/util/timer.ts",[],"/Users/a58/Desktop/my/beautiful/src/components/Sudoku/index.tsx",[],"/Users/a58/Desktop/my/beautiful/src/components/Sudoku/MethodBase.ts",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":17,"column":8,"nodeType":"137","messageId":"138","endLine":17,"endColumn":17},{"ruleId":"135","severity":1,"message":"139","line":55,"column":9,"nodeType":"137","messageId":"138","endLine":55,"endColumn":21},{"ruleId":"140","severity":1,"message":"141","line":159,"column":6,"nodeType":"142","endLine":159,"endColumn":34,"suggestions":"143"},{"ruleId":"140","severity":1,"message":"144","line":203,"column":6,"nodeType":"142","endLine":203,"endColumn":24,"suggestions":"145"},{"ruleId":"140","severity":1,"message":"146","line":133,"column":6,"nodeType":"142","endLine":133,"endColumn":19,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"141","line":180,"column":6,"nodeType":"142","endLine":180,"endColumn":34,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"144","line":227,"column":6,"nodeType":"142","endLine":227,"endColumn":24,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"150","line":44,"column":6,"nodeType":"142","endLine":44,"endColumn":8,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":339,"column":13,"nodeType":"154","messageId":"155","endLine":339,"endColumn":15},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"140","severity":1,"message":"156","line":48,"column":6,"nodeType":"142","endLine":48,"endColumn":30,"suggestions":"157"},{"ruleId":"140","severity":1,"message":"158","line":57,"column":6,"nodeType":"142","endLine":57,"endColumn":26,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":5,"column":1,"nodeType":"162","endLine":149,"endColumn":3},{"ruleId":"135","severity":1,"message":"163","line":7,"column":11,"nodeType":"137","messageId":"138","endLine":7,"endColumn":19},{"ruleId":"135","severity":1,"message":"164","line":7,"column":3,"nodeType":"137","messageId":"138","endLine":7,"endColumn":20},{"ruleId":"135","severity":1,"message":"165","line":8,"column":3,"nodeType":"137","messageId":"138","endLine":8,"endColumn":18},{"ruleId":"135","severity":1,"message":"166","line":12,"column":3,"nodeType":"137","messageId":"138","endLine":12,"endColumn":11},{"ruleId":"135","severity":1,"message":"167","line":13,"column":3,"nodeType":"137","messageId":"138","endLine":13,"endColumn":8},{"ruleId":"160","severity":1,"message":"161","line":17,"column":1,"nodeType":"162","endLine":63,"endColumn":3},{"ruleId":"140","severity":1,"message":"168","line":18,"column":6,"nodeType":"142","endLine":18,"endColumn":8,"suggestions":"169"},{"ruleId":"131","replacedBy":"170"},{"ruleId":"133","replacedBy":"171"},{"ruleId":"135","severity":1,"message":"172","line":1,"column":10,"nodeType":"137","messageId":"138","endLine":1,"endColumn":22},{"ruleId":"135","severity":1,"message":"173","line":7,"column":3,"nodeType":"137","messageId":"138","endLine":7,"endColumn":9},{"ruleId":"160","severity":1,"message":"161","line":15,"column":1,"nodeType":"162","endLine":53,"endColumn":3},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"@typescript-eslint/no-unused-vars","'WebGLRole' is defined but never used.","Identifier","unusedVar","'roleCallBack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'sizeX', 'sizeY', and 'sizeZ'. Either include them or remove the dependency array.","ArrayExpression",["176"],"React Hook useMemo has a missing dependency: 'fixed'. Either include it or remove the dependency array.",["177"],"React Hook useMemo has a missing dependency: 'perspective'. Either include it or remove the dependency array.",["178"],["179"],["180"],"React Hook useEffect has a missing dependency: 'other'. Either include it or remove the dependency array.",["181"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useMemo has missing dependencies: 'deg' and 'height'. Either include them or remove the dependency array.",["182"],"React Hook useMemo has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.",["183"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'anyProps' is defined but never used.","'TextureFilterMode' is defined but never used.","'TextureWrapMode' is defined but never used.","'WrapMode' is defined but never used.","'Color' is defined but never used.","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["184"],["174"],["175"],"'OrbitControl' is defined but never used.","'Logger' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"185","fix":"191"},{"desc":"187","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [direction, sizeX, unit, sizeY, sizeZ]",{"range":"201","text":"202"},"Update the dependencies array to be: [direction, index, fixed]",{"range":"203","text":"204"},"Update the dependencies array to be: [perspective, sizeZ, unit]",{"range":"205","text":"206"},{"range":"207","text":"202"},{"range":"208","text":"204"},"Update the dependencies array to be: [other]",{"range":"209","text":"210"},"Update the dependencies array to be: [direction, height, deg, width, unit]",{"range":"211","text":"212"},"Update the dependencies array to be: [width, unit, height, speed, color]",{"range":"213","text":"214"},"Update the dependencies array to be: [callback]",{"range":"215","text":"216"},[4224,4252],"[direction, sizeX, unit, sizeY, sizeZ]",[5480,5498],"[direction, index, fixed]",[3266,3279],"[perspective, sizeZ, unit]",[4553,4581],[5884,5902],[1106,1108],"[other]",[1138,1162],"[direction, height, deg, width, unit]",[1387,1407],"[width, unit, height, speed, color]",[490,492],"[callback]"]